<DOMSymbolItem xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://ns.adobe.com/xfl/2008/" name="Bread" itemID="6600df7e-00000130" lastModified="1712205049">
  <timeline>
    <DOMTimeline name="Bread" layerDepthEnabled="true">
      <layers>
        <DOMLayer name="Layer_3" color="#FF800A" current="true" isSelected="true">
          <frames>
            <DOMFrame index="0" keyMode="9728">
              <Actionscript>
                <script><![CDATA[import flash.events.KeyboardEvent;
import flash.geom.Point;
import flash.display.MovieClip;

stage.addEventListener(KeyboardEvent.KEY_DOWN, keyDown)
stage.addEventListener(KeyboardEvent.KEY_UP, keyUp)
addEventListener(Event.ENTER_FRAME, enterFrame)

var speed: Number = 400

var keyLeftPressed = false
var keyRightPressed = false
var keyUpPressed = false
var keyDownPressed = false
var keyAPressed = false
var keyDPressed = false
var keyWPressed = false
var keySPressed = false
var keySpacePressed = false

var velocity: Point = new Point()
var velocityTo: Point = new Point()

var level: MovieClip = MovieClip(parent)

var launched = false

var shootT = 0.1

var sinceJump = 0.0

var jumpHolding = false

stop()

function enterFrame(e) {
	if (launched)
		processAir()
}


function processAir() {
	if (sinceJump > 0.1 && jumpHolding) {
		Game.speed = moveToward(Game.speed, 0.1, 0.05)
	} else {
		Game.speed = moveToward(Game.speed, 1.0, 0.05)
	}
	var delta = 1 / 60 * Game.speed
	sinceJump += 1 / 60
	
	velocityTo.x = 0
	
	var accelDuration = 2.0

	if (keyLeftPressed || keyAPressed) {
		velocityTo.x -= 1
	}
	if (keyRightPressed || keyDPressed) {
		velocityTo.x += 1
	}
	
	velocityTo.x *= speed
	
	if (Math.abs(velocityTo.x) > 0){
		accelDuration = 0.2
	}
	
	velocity.x = moveToward(velocity.x, velocityTo.x, speed / accelDuration * delta)
	x += velocity.x * delta
	y += velocity.y * delta
	
	model.rotation += velocity.x * delta * 2.0
	
	if (jumpHolding) {
		velocity.y += (Math.abs(velocity.y * 3) + 600) * delta
	} else {
		velocity.y += 4000 * delta
	}
	
	shootT -= delta
	if (shootT < 0) {
		shootT += 0.01
		shootBullet(0)
		//shootBullet(180)
	}
}

function launch() {
	if (launched) {
		return
	}
	launched = true
	velocity.y = -1600
	velocity.x = rotation * 20
	model.gotoAndStop(2)
	shootT = 0.2
	jumpHolding = true
	sinceJump = 0.0
}

function shootBullet(angleOffset) {
	var bullet = new Bullet()
	level.addChild(bullet)
	
	var angle = pointAngle(mouseX, mouseY)
	var dirX = Math.cos(angle + Math.PI)
	var dirY = Math.sin(angle + Math.PI)
	
	bullet.x = x + dirX * 50
	bullet.y = y + dirY * 50
	var speed = 1500
	bullet.init(
			dirX * speed,
			dirY * speed
	)
	bullet.rotation = angle * toDegrees + 180
}

function unlaunch() {
	launched = false
	model.gotoAndStop(1)
	Game.speed = 1
}

function rayFloor(offset) {
	var checkingX = x + offset
	var checkingY = y
	var checkingDistance = 30
	var spotted = false
	for(var i = 0; i < 1000; i += 1) {
		if(level.ground.hitTestPoint(checkingX, checkingY, true)){
			spotted = true
			checkingDistance *= 0.5
			checkingY -= checkingDistance
			if (checkingDistance < 1.0) {
				return checkingY
			}
		} else {
			if (spotted) {
				checkingDistance *= 0.5
			}
			checkingY += checkingDistance
		}
	}
	return checkingY
}

function keyDown(e: KeyboardEvent) {
	switch(e.keyCode) {
		case 37:
			keyLeftPressed = true
			break
		case 39:
			keyRightPressed = true
			break
		case 38:
			keyUpPressed = true
			break
		case 40:
			keyDownPressed = true
			break
		case 65:
			keyAPressed = true
			break
		case 68:
			keyDPressed = true
			break
		case 87:
			keyWPressed = true
			break
		case 83:
			keySPressed = true
			break
		case 32:
			if (!keySpacePressed) {
				keySpacePressed = true
				launch()
			}
			break
	}
}

function keyUp(e: KeyboardEvent) {
	switch(e.keyCode) {
		case 37:
			keyLeftPressed = false
			break
		case 39:
			keyRightPressed = false
			break
		case 38:
			keyUpPressed = false
			break
		case 40:
			keyDownPressed = false
			break
		case 65:
			keyAPressed = false
			break
		case 68:
			keyDPressed = false
			break
		case 87:
			keyWPressed = false
			break
		case 83:
			keySPressed = false
			break
		case 32:
			keySpacePressed = false
			if (jumpHolding) {
				jumpHolding = false
				Game.speed = 1.0
			}
			break
	}
}

function lerp(from, to, t) {
	return from + (to - from) * t
}

function moveToward(from, to, delta) {
	if (from < to) {
		return Math.min(from + delta, to)
	} else {
		return Math.max(from - delta, to)
	}
}

function pointAngle(fromX, fromY, toX = 0, toY = 0) {
	return (Math.atan2(fromY - toY, fromX - fromY) + Math.PI)
}

var toDegrees = 180.0 / Math.PI

function pointsDistance(fromX, fromY, toX, toY) {
	var dx:Number = toX - fromX;
	var dy:Number = toY - fromY;
	return Math.sqrt(dx * dx + dy * dy);
}]]></script>
              </Actionscript>
              <elements/>
            </DOMFrame>
          </frames>
        </DOMLayer>
        <DOMLayer name="Layer_2" color="#9933CC">
          <frames>
            <DOMFrame index="0" keyMode="9728">
              <elements>
                <DOMSymbolInstance libraryItemName="BreadFrames" name="model">
                  <matrix>
                    <Matrix tx="0.05" ty="-0.95"/>
                  </matrix>
                  <transformationPoint>
                    <Point/>
                  </transformationPoint>
                </DOMSymbolInstance>
              </elements>
            </DOMFrame>
          </frames>
        </DOMLayer>
      </layers>
    </DOMTimeline>
  </timeline>
</DOMSymbolItem>